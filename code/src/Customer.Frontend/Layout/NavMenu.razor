@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using IApply.Frontend.Common.Enums
@using IApply.Frontend.Common.Utilities

@inject NavigationManager navigation
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration _configuration
@inject AuthenticationStateProvider authStateProvider
@inject LoadingService loadingService
@inject AlertService alertService


@rendermode InteractiveServer
@* <AuthorizeView>
    <Authorized> *@
<!-- Sidebar -->
<style>
    .nav-link.active {
        background: var(--tblr-navbar-active-bg);
        border-radius: 0% !important;
    }
</style>
<!-- Sidebar -->
<aside class="navbar navbar-vertical navbar-expand-lg overflow-y-auto navbar-transparent overflow-x-hidden @(SidebarClass ?? "")">
    <div class="container-fluid">
        @if (SidebarClass == "")
        {
            <div class="d-flex align-items-center w-100">
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebar-menu"
                        aria-controls="sidebar-menu" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <h1 class="navbar-brand navbar-brand-autodark d-flex justify-content-center align-items-center text-center w-100">
                    <a class="border-0 text-decoration-none" @onclick="ReloadPage">
                        <div class="d-flex justify-content-center align-items-center">
                            @* Work space icon comes here *@
                            <span class="fw-bold">iApply</span>
                        </div>
                    </a>
                </h1>
            </div>
        }
        @if (SidebarClass != "")
        {
            <h1 class="navbar-brand navbar-brand-autodark">
                <a class="border-0 d-flex justify-content-center px-2" @onclick="ReloadPage">

                    <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="50" height="50"
                         viewBox="0 0 600.000000 600.000000">
                        <g transform="translate(0.000000,600.000000) scale(0.100000,-0.100000)" fill="#000000"
                           stroke="none">
                            <path fill="#b12c2d" d="M1600 4245 l0 -325 1400 0 1400 0 0 325 0 325 -1400 0 -1400 0 0
                                                                                    -325z" />
                            <path d="M2650 2455 l0 -995 330 0 330 0 0 995 0 995 -330 0 -330 0 0 -995z" />
                        </g>
                    </svg>
                </a>
            </h1>
        }

        <div class="collapse navbar-collapse @(SidebarClass == "" ? SidebarClass : "show")" id="sidebar-menu">
            @* apply role filter here *@

            <ul class="navbar-nav">

                @* Dashboard *@
                <li class="nav-item ">
                    <NavLink class="nav-link nav-items" href="home" Match="NavLinkMatch.All">
                        <div class="d-flex align-items-center @(SidebarClass == "" ? "" : "w-100 justify-content-end")">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M13 9V3h8v6zM3 13V3h8v10zm10 8V11h8v10zM3 21v-6h8v6zm2-10h4V5H5zm10 8h4v-6h-4zm0-12h4V5h-4zM5 19h4v-2H5zm4-2" /></svg>
                            </span>
                            <span class="nav-link-title @(SidebarClass == "" ? SidebarClass : "d-none")">
                                <strong>
                                    Dashboard
                                </strong>
                            </span>
                        </div>

                    </NavLink>
                </li>

                @* Profile *@
                <li class="nav-item ">
                    <NavLink class="nav-link nav-items" href="profile">
                        <div class="d-flex align-items-center @(SidebarClass == "" ? "" : "w-100 justify-content-end")">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"><path d="M16 9a4 4 0 1 1-8 0a4 4 0 0 1 8 0m-2 0a2 2 0 1 1-4 0a2 2 0 0 1 4 0" /><path d="M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11s11-4.925 11-11S18.075 1 12 1M3 12c0 2.09.713 4.014 1.908 5.542A8.99 8.99 0 0 1 12.065 14a8.98 8.98 0 0 1 7.092 3.458A9 9 0 1 0 3 12m9 9a8.96 8.96 0 0 1-5.672-2.012A6.99 6.99 0 0 1 12.065 16a6.99 6.99 0 0 1 5.689 2.92A8.96 8.96 0 0 1 12 21" /></g></svg>
                            </span>
                            <span class="nav-link-title @(SidebarClass == "" ? SidebarClass : "d-none")">
                                <strong>
                                    Profile
                                </strong>
                            </span>
                        </div>
                    </NavLink>
                </li>

                @* Job & Applications *@
                <li class="nav-item ">
                    <NavLink class="nav-link nav-items" href="job-applications">
                        <div class="d-flex align-items-center @(SidebarClass == "" ? "" : "w-100 justify-content-end")">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><g fill="currentColor"><path d="M7.8 6.35c.56 0 1.01-.45 1.01-1.01S8.36 4.33 7.8 4.33s-1.01.45-1.01 1.01s.45 1.01 1.01 1.01" /><path fill-rule="evenodd" d="M9.83 8.55c0-1.08-.91-1.86-2.03-1.86s-2.03.78-2.03 1.86v.51c0 .09.04.18.1.24s.15.1.24.1h3.38c.09 0 .18-.04.24-.1s.1-.15.1-.24zM5.75 11.5a.75.75 0 0 1 .75-.75h7a.75.75 0 0 1 0 1.5h-7a.75.75 0 0 1-.75-.75m0 3a.75.75 0 0 1 .75-.75h7a.75.75 0 0 1 0 1.5h-7a.75.75 0 0 1-.75-.75" clip-rule="evenodd" /><path fill-rule="evenodd" d="M2.5 2.5c0-1.102.898-2 2-2h6.69c.562 0 1.092.238 1.465.631l.006.007l4.312 4.702c.359.383.527.884.527 1.36v10.3c0 1.102-.898 2-2 2h-11c-1.102 0-2-.898-2-2zm8.689 0H4.5v15h11V7.192l-4.296-4.685l-.003-.001z" clip-rule="evenodd" /><path fill-rule="evenodd" d="M11.19.5a1 1 0 0 1 1 1v4.7h4.31a1 1 0 1 1 0 2h-5.31a1 1 0 0 1-1-1V1.5a1 1 0 0 1 1-1" clip-rule="evenodd" /></g></svg>
                            </span>
                            <span class="nav-link-title @(SidebarClass == "" ? SidebarClass : "d-none")">
                                <strong>
                                    Jobs & Applications
                                </strong>
                            </span>
                        </div>
                    </NavLink>
                </li>

                @* Subscriptions *@
                <li class="nav-item ">
                    <NavLink class="nav-link nav-items" href="subscriptions">
                        <div class="d-flex align-items-center @(SidebarClass == "" ? "" : "w-100 justify-content-end")">
                            <span class="nav-link-icon d-md-none d-lg-inline-block">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M10 21h4c0 1.1-.9 2-2 2s-2-.9-2-2m11-2v1H3v-1l2-2v-6c0-3.1 2-5.8 5-6.7V4c0-1.1.9-2 2-2s2 .9 2 2v.3c3 .9 5 3.6 5 6.7v6zm-4-8c0-2.8-2.2-5-5-5s-5 2.2-5 5v7h10z" /></svg>
                            </span>
                            <span class="nav-link-title @(SidebarClass == "" ? SidebarClass : "d-none")">
                                <strong>
                                    Subscriptions
                                </strong>
                            </span>
                        </div>
                    </NavLink>
                </li>

                @* settings *@
                <li class="nav-item dropdown ">
                    <a class="nav-link nav-items  @(SidebarClass=="" ? "dropdown-toggle":"")" data-bs-auto-close="false"
                       role="button" aria-expanded="true" @onclick="@(() => OnChangeToggle("settings"))">
                        <div class="d-flex align-items-center @(SidebarClass == "" ? "" : "w-100 justify-content-end")">
                            <span class="nav-link-icon d-md-none d-lg-inline-block ">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M12 8a4 4 0 0 1 4 4a4 4 0 0 1-4 4a4 4 0 0 1-4-4a4 4 0 0 1 4-4m0 2a2 2 0 0 0-2 2a2 2 0 0 0 2 2a2 2 0 0 0 2-2a2 2 0 0 0-2-2m-2 12c-.25 0-.46-.18-.5-.42l-.37-2.65c-.63-.25-1.17-.59-1.69-.99l-2.49 1.01c-.22.08-.49 0-.61-.22l-2-3.46a.493.493 0 0 1 .12-.64l2.11-1.66L4.5 12l.07-1l-2.11-1.63a.493.493 0 0 1-.12-.64l2-3.46c.12-.22.39-.31.61-.22l2.49 1c.52-.39 1.06-.73 1.69-.98l.37-2.65c.04-.24.25-.42.5-.42h4c.25 0 .46.18.5.42l.37 2.65c.63.25 1.17.59 1.69.98l2.49-1c.22-.09.49 0 .61.22l2 3.46c.13.22.07.49-.12.64L19.43 11l.07 1l-.07 1l2.11 1.63c.19.15.25.42.12.64l-2 3.46c-.12.22-.39.31-.61.22l-2.49-1c-.52.39-1.06.73-1.69.98l-.37 2.65c-.04.24-.25.42-.5.42zm1.25-18l-.37 2.61c-1.2.25-2.26.89-3.03 1.78L5.44 7.35l-.75 1.3L6.8 10.2a5.55 5.55 0 0 0 0 3.6l-2.12 1.56l.75 1.3l2.43-1.04c.77.88 1.82 1.52 3.01 1.76l.37 2.62h1.52l.37-2.61c1.19-.25 2.24-.89 3.01-1.77l2.43 1.04l.75-1.3l-2.12-1.55c.4-1.17.4-2.44 0-3.61l2.11-1.55l-.75-1.3l-2.41 1.04a5.42 5.42 0 0 0-3.03-1.77L12.75 4z" /></svg>
                                </svg>
                            </span>
                            <span class="nav-link-title @(SidebarClass == "" ? SidebarClass : "d-none")">
                                <strong>
                                    Settings
                                </strong>
                            </span>
                        </div>
                    </a>

                    <div class="dropdown-menu @(IsDropdownOpen("settings") ? "show" : "")">
                        <div class="dropdown-menu-columns">
                            <div class="@(SidebarClass == "" ? SidebarClass : "d-none")">
                                <NavLink class="dropdown-item py-1  nav-items nav-link"
                                         href="auth-policy">
                                    <span class="nav-link-title">Change Password</span>
                                </NavLink>
                            </div>
                        </div>
                    </div>
                </li>

            </ul>

        </div>
    </div>
</aside>
@*  </Authorized>
</AuthorizeView> *@


@code {
    // Properties
    [Parameter]
    public string? SidebarClass { get; set; } = "";
    [Parameter]
    public EventCallback ToggleSidebar { get; set; }
    private Dictionary<string, bool> DropDownStates = new();
    private ClaimsPrincipal? UserState { get; set; }
    private int CurrentPage { get; set; } = 1;
    private int CurrentPageSize { get; set; } = 20;
    private int WorkspaceCount = 0;
    private int ProjectCount = 0;
    private string? OpenWorkspaceId;
    private string? CurrentUserWorkspaceName { get; set; }
    private int CurrentUserId { get; set; }

    //Events
    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        UserState = authState.User;
    }

    private void ReloadPage()
    {
        navigation.NavigateTo(navigation.Uri, forceLoad: true);
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    private void OnChangeToggle(string name)
    {
        if (!DropDownStates.ContainsKey(name))
        {
            DropDownStates[name] = false;
        }

        if (SidebarClass != "")
        {
            DropDownStates[name] = true;
            ToggleSidebar.InvokeAsync();
        }
        else
        {
            DropDownStates[name] = !DropDownStates[name];
        }
    }

    private void ToggleWorkspace(int workspaceId)
    {
        var idStr = workspaceId.ToString();
        OpenWorkspaceId = (OpenWorkspaceId == idStr) ? null : idStr;
    }

    private Dictionary<int, bool> projectDropdowns = new();

    private void ToggleDropdown(int projectId)
    {
        if (projectDropdowns.ContainsKey(projectId))
            projectDropdowns[projectId] = !projectDropdowns[projectId];
        else
            projectDropdowns[projectId] = true;
    }

    private bool IsDropdownOpen(int projectId) =>
        projectDropdowns.TryGetValue(projectId, out var isOpen) && isOpen;
    private bool IsDropdownOpen(string name) => DropDownStates.ContainsKey(name) && DropDownStates[name];

    // Data
    private async Task GetUserWorkspace()
    {
        try
        {
            loadingService.Show();

        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            loadingService.Hide();
        }
    }

    private async Task GetUserProfile()
    {
        try
        {
            loadingService.Show();

            CurrentUserId = Utils.GetUserId(UserState);

        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            loadingService.Hide();
        }
    }
}