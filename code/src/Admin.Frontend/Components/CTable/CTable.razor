@using System.Reflection
@using Microsoft.AspNetCore.Components.Rendering
@using IApply.Frontend.Common.CustomAttributes
@using IApply.Frontend.Common.Utilities
@using IApply.Frontend.Models.Assets;
@typeparam T
@inject IJSRuntime Js

@if (Items.Any())
{
    <div class="card ">
        <div class="card-body border-bottom py-1">
                    <div class="d-flex align-items-center">
                      <div class="text-secondary">
                        Show
                        <div class="mx-2 d-inline-block">
                                <select class="form-select form-select-sm py-1" @bind="RowsPerPage">
                                    @foreach (var count in GetPageSizeOptions())
                                    {
                                        <option value="@count">@count</option>
                                    }

                                </select>
                        </div>
                        entries
                      </div>
                      <div class="ms-auto text-secondary d-flex align-items-center gap-2">
                        @*Dropdown for coloumns*@
                       <div class="dropdown">
        <button class="btn btn-sm py-1 px-2 btn-outline dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-label="open-column-menu" aria-expanded="false">
            Columns
        </button>
            <div class="dropdown-menu " data-bs-popper="static">
                <div class="container">
                    <div class="d-flex flex-column mt-2 px-1">
                    @foreach (var property in typeof(T).GetProperties())
                    {
                        if (property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any()) 
                            continue;
                        var displayName = Utils.GetDisplayName<T>(property.Name);
                        var isChecked = _selectedColumns.Count == 0 || _selectedColumns.Contains(property.Name);
                        <label class="form-check mb-2">
                            <input class="form-check-input  cursor-pointer" type="checkbox" checked="@_selectedColumns.Contains(property.Name)"@onchange="@((e) => ToggleColumn(property.Name, (bool)e.Value))" />
                            <span class="form-check-label">@displayName</span>
                        </label>
                    }
                    </div>
                </div>

            </div>
        </div>
                        @* Search: *@
                          <input class="form-control py-1 rounded-3" id="search" @bind="SearchQuery" @bind:event="oninput" name="search" placeholder="Search.." type="text" />
                      </div>
                       <div class="dropdown mt-1">
                            <button id="action" class="btn-action dropdown-toggle w-100 h-100" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--bi" width="1.5em" height="1.5em" viewBox="0 0 16 16">
                                    <path fill="currentColor" d="M9.5 13a1.5 1.5 0 1 1-3 0a1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0a1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0a1.5 1.5 0 0 1 3 0"></path>
                                </svg>
                            </button>
                            <div class="dropdown-menu dropdown-menu-right">
                                <span class="dropdown-item" @onclick="DownloadExcel">
                                    Download Excel
                                </span>
                            </div>
                        </div>
                    </div>
                  </div>
                <div class="table-responsive">
                    @if (_selectedColumns.Count == 0)
            {
                <div class="p-3 text-center text-muted">
                    <i class="bi bi-exclamation-circle fs-4"></i>
                    <p class="mb-0">No columns selected. Please select at least one column to display data.</p>
                </div>
            }
            else
            {
                    <table class="table table-selectable table-bordered card-table table-vcenter text-nowrap datatable">
                      <thead>
                        <tr>
                        @foreach (var property in typeof(T).GetProperties())
                            {
                                if (property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any() || !ShouldShowColumn(property)) continue;
                                var widthAttribute = property.GetCustomAttribute<ColumnWidthAttribute>();
                                var displayName = Utils.GetDisplayName<T>(property.Name);

                                <th class="py-2  text-center  @(widthAttribute?.Width ?? "w-auto")" @onclick="() => SortBy(property.Name)">
                                    <span class="d-flex align-items-center @(!string.IsNullOrEmpty(widthAttribute?.Width) ? "justify-content-center" : "justify-content-start") cursor-pointer">
                                        <span class="h4 m-0 p-0" style="padding-right: 1px;">
                                            @displayName
                                        </span>
                                            @if (string.IsNullOrEmpty(widthAttribute?.Width)) // Keep same logic
    {
        <span class="nav-link-icon d-md-none d-lg-inline-block">
            @if (SortProperty == property.Name)
            {
                @if (SortDescending)
                {
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" class="iconify iconify--tabler" width="1em" height="1em" viewBox="0 0 24 24">
                        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 15l6-6l6 6"></path>
                    </svg>
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" class="iconify iconify--tabler" width="1em" height="1em" viewBox="0 0 24 24">
                        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m6 9l6 6l6-6"></path>
                    </svg>
                }
            }
        </span>
    }

                                    </span>
                                </th>
                            }

                            <!-- Action column header -->
                            @if (ActionRequired)
                            {
                                <th class="w-1"><span class=" mb-0 pb-0" style="padding-right: 1px;">Action</span></th>
                            }
                        </tr>
                      </thead>
                                            <tbody>
                        @foreach (var item in FilteredItems)
                        {
                            <tr class="fs-4">
                                @foreach (var property in typeof(T).GetProperties())
                                {
                                        if (property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any() || !ShouldShowColumn(property)) continue;

                                    <td class="py-1 @(property.PropertyType == typeof(int) || property.PropertyType == typeof(long) || property.PropertyType == typeof(float) || property.PropertyType == typeof(double) || property.PropertyType == typeof(decimal) ? "" : "")">
                                        @if (CustomRenderFragments != null && CustomRenderFragments.TryGetValue(property.Name, out var renderFragment))
                                        {
                                            @renderFragment(item)
                                        }
                                        else
                                        {
                                            <span title="@(property.PropertyType == typeof(Guid) ? property.GetValue(item)?.ToString() : string.Empty)">
                                                @if (item != null)
                                                {
                                                    @GetDisplayValue(item, property)
                                                }
                                            </span>
                                        }
                                    </td>
                                }

                                <!-- Action Column -->
                                @if (ActionRequired)
                                {
                                    <td>
                                        @if (IsFragmentEmpty(Action, item))
                                        {
                                            <div>No action available</div>
                                        }
                                        else
                                        {
                                            @Action?.Invoke(item)
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                    </table>
                    }
                  </div>
        <!-- Card Footer-->
        <div class="card-footer d-flex align-items-center py-1">
                    <p class="m-0 ">Showing <span>1</span> to <span>@RowsPerPage</span> of <span>@TotalCount</span> entries</p>
                      <ul class="pagination m-0 ms-auto">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => SetPage(1)">First</button>
                </li>

                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => SetPage(CurrentPage - 1)">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="me-1 iconify iconify--tabler" width="1em" height="1em" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m15 6l-6 6l6 6"></path></svg>
                        Prev
                    </button>
                </li>

                @for (int i = 1; i <= TotalPages; i++)
                {
                    var pageNmmber = i;
                    <li class="page-item @(CurrentPage == i ? "active" : "")">
                        <button class="page-link rounded-5" @onclick="() => SetPage(pageNmmber)">@pageNmmber</button>
                    </li>
                }

                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => SetPage(CurrentPage + 1)">
                        Next
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="me-1 iconify iconify--tabler" width="1em" height="1em" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m9 6l6 6l-6 6"></path></svg>
                    </button>
                </li>

                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link custom-btn" @onclick="() => SetPage(TotalPages)">Last</button>
                </li>
            </ul>
                  </div>

    </div>
}
else
{
    <div class="border shadow rounded p-3 bg-white">
        <div class="row align-items-center ">
            <p class="text-danger m-0">No data available.</p>
        </div>
    </div>
}


@code {
    [Parameter]
    public IEnumerable<T> Items { get; set; } = [];
    [Parameter]
    public int TotalCountFromServer { get; set; } = 0;
    [Parameter]
    public RenderFragment<T>? Action { get; set; }
    [Parameter]
    public bool ActionRequired { get; set; } = true;
    [Parameter]
    public Dictionary<string, RenderFragment<T>>? CustomRenderFragments { get; set; }
    [Parameter]
    public bool BackendPagination { get; set; } = false;
    [Parameter]
    public bool BackendSorting { get; set; } = false;
    [Parameter]
    public int InitialPageNumber { get; set; } = 1;
    [Parameter]
    public int InitialPageSize { get; set; } = 20;
    [Parameter]
    public EventCallback<(int PageNumber, int PageSize, string? OrderBy, bool Ascending)> OnPaginationChanged { get; set; }
    private List<string> _selectedColumns = typeof(T).GetProperties()
        .Where(p => !p.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any())
        .Select(p => p.Name)
        .ToList();
    private int TotalCount => BackendPagination ? TotalCountFromServer : FilteredItemCount;
    private int FilteredItemCount => ApplySortingAndFiltering().Count();

    private int _rowsPerPage = 20;
    private int _currentPage { get; set; } = 1;

    private int RowsPerPage
    {
        get => BackendPagination ? InitialPageSize : _rowsPerPage;
        set
        {
            if (_rowsPerPage != value)
            {
                _rowsPerPage = value;
                CurrentPage = 1;
                if (BackendPagination)
                {
                    OnPaginationChanged.InvokeAsync((_currentPage, _rowsPerPage, SortProperty, !SortDescending));
                }
            }
        }
    }

    private int CurrentPage
    {
        get => BackendPagination ? InitialPageNumber : _currentPage;
        set
        {
            if (_currentPage != value)
            {
                _currentPage = value;
                if (BackendPagination)
                {
                    OnPaginationChanged.InvokeAsync((_currentPage, _rowsPerPage, SortProperty, !SortDescending));
                }
            }
        }
    }

    private string SearchQuery { get; set; } = string.Empty;
    private int TotalPages => (int)Math.Ceiling((double)TotalCount / RowsPerPage);

    [Parameter]
    public string? SortProperty { get; set; } = null;
    [Parameter]
    public bool SortDescending { get; set; } = false;

    private IEnumerable<T> FilteredItems
    {
        get
        {
            var filtered = ApplySortingAndFiltering();

            if (!BackendPagination)
            {
                return filtered.Skip((CurrentPage - 1) * RowsPerPage).Take(RowsPerPage);
            }

            return filtered;
        }
    }
    private IEnumerable<T> ApplySortingAndFiltering()
    {
        // Filter the items based on the search query
        var filtered = string.IsNullOrWhiteSpace(SearchQuery)
            ? Items
            : Items.Where(item =>
                typeof(T).GetProperties()
                .Where(property => !property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any())
                .Any(property =>
                {
                    string value;
                    if (property.PropertyType == typeof(bool) &&
                        property.GetCustomAttributes(typeof(BoolDisplayAttribute), false).FirstOrDefault() is BoolDisplayAttribute boolAttr)
                    {
                        var boolValue = (bool)property.GetValue(item);
                        value = boolValue ? boolAttr.TrueText : boolAttr.FalseText;
                    }
                    else
                    {
                        value = property.GetValue(item)?.ToString() ?? string.Empty;
                    }

                    return value.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase);
                })
            );

        // Skip sorting if backend sorting is enabled
        if (BackendSorting || string.IsNullOrEmpty(SortProperty))
        {
            return filtered;
        }

        var propertyInfo = typeof(T).GetProperty(SortProperty);
        if (propertyInfo == null) return filtered;

        return SortDescending
            ? filtered.OrderByDescending(item => propertyInfo.GetValue(item))
            : filtered.OrderBy(item => propertyInfo.GetValue(item));
    }

    private async Task SortBy(string propertyName)
    {
        if (SortProperty == propertyName)
        {
            SortDescending = !SortDescending;
        }
        else
        {
            SortProperty = propertyName;
            SortDescending = false;
        }

        if (BackendSorting)
        {
            // Call the backend API with sorting parameters
            await OnPaginationChanged.InvokeAsync((_currentPage, _rowsPerPage, SortProperty, !SortDescending));
        }
        else
        {
            // Trigger local sorting and reapply filtering
            StateHasChanged();
        }
    }

    private List<int> GetPageSizeOptions()
    {
        return [20, 30, 50, 100];
    }

    private void SetPage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        CurrentPage = page;
        // OnPaginationChanged.InvokeAsync((CurrentPage, RowsPerPage));
    }

    private string GetDisplayValue(object item, PropertyInfo property)
    {
        if (property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any())
            return null;

        var value = property.GetValue(item);

        var boolDisplayAttribute = property.GetCustomAttributes(typeof(BoolDisplayAttribute), false)
                                            .FirstOrDefault() as BoolDisplayAttribute;

        if (property.PropertyType == typeof(bool) && boolDisplayAttribute != null)
        {
            return (value is true) ? boolDisplayAttribute.TrueText : boolDisplayAttribute.FalseText;
        }

        if (property.PropertyType == typeof(Guid) && value is Guid guidValue)
        {
            return "..." + guidValue.ToString()[(guidValue.ToString().Length - 6)..];
        }

        return value?.ToString() ?? string.Empty;
    }

    private bool IsFragmentEmpty(RenderFragment<T>? fragment, T item)
    {
        if (fragment == null)
        {
            return true;
        }

        // Create a RenderTreeBuilder to capture the content
        var builder = new RenderTreeBuilder();
        fragment(item)(builder);

        // Check if there are any frames rendered
        return builder.GetFrames().Count == 0;
    }

    private async Task DownloadExcel()
    {
        // Prepare the XML for the Excel file
        var properties = typeof(T).GetProperties();
        var excelXml = new System.Text.StringBuilder();

        // Start the workbook XML structure
        excelXml.Append(@"<?xml version=""1.0""?>
                        <?mso-application progid=""Excel.Sheet""?>
                        <Workbook xmlns=""urn:schemas-microsoft-com:office:spreadsheet""
                                  xmlns:o=""urn:schemas-microsoft-com:office:office""
                                  xmlns:x=""urn:schemas-microsoft-com:office:excel""
                                  xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet"">
                            <Worksheet ss:Name=""Sheet1"">
                                <Table>");

        // Add headers
        excelXml.Append("<Row>");
        foreach (var property in properties)
        {
            if (property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any())
                continue;

            var displayName = Utils.GetDisplayName<T>(property.Name);

            excelXml.Append($"<Cell><Data ss:Type=\"String\">{displayName}</Data></Cell>");
        }
        excelXml.Append("</Row>");

        // Add data rows
        foreach (var item in Items)
        {
            excelXml.Append("<Row>");
            foreach (var property in properties)
            {
                if (item == null || property.GetCustomAttributes(typeof(IgnoreInTableAttribute), false).Any()) continue;
                var value = GetDisplayValue(item, property);
                excelXml.Append($"<Cell><Data ss:Type=\"String\">{System.Security.SecurityElement.Escape(value)}</Data></Cell>");
            }
            excelXml.Append("</Row>");
        }

        // Close XML structure
        excelXml.Append(@"</Table></Worksheet></Workbook>");

        // Convert to base64 for download
        var fileName = $"{typeof(T).Name}_Export.xls";
        var base64Data = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(excelXml.ToString()));

        // Trigger download
        await Js.InvokeVoidAsync("BlazorDownloadFile", fileName, "application/vnd.ms-excel", base64Data);
    }

    private void ToggleColumn(string propertyName, bool isSelected)
{
    if (isSelected)
    {
        if (!_selectedColumns.Contains(propertyName))
        {
            _selectedColumns.Add(propertyName);
        }
    }
    else
    {
        _selectedColumns.Remove(propertyName);
    }
    StateHasChanged();
}


private bool ShouldShowColumn(PropertyInfo property)
{
    return _selectedColumns.Contains(property.Name);
}
}
