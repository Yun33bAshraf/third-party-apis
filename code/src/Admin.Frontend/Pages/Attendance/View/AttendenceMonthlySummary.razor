@page "/attendance-monthly-summary"
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using IApply.Frontend.Models.Attendances
@using IApply.Frontend.Services
@using IApply.Frontend.Services.ApiService.AttendenceMonthly
@using IApply.Frontend.Components.CTable
@using IApply.Frontend.Components.FilterCard
@using IApply.Frontend.Services.ApiService.System

@inject AlertService AlertService
@inject LoadingService LoadingService
@inject IAttendenceService AttendenceService
@inject AuthenticationStateProvider authStateProvider

@attribute [Authorize]

<PageTitle>Attendance Monthly Summary</PageTitle>

<div class="col-12">
    <FilterCard Title="Monthly Attendance Summary Filters" ExecApi="true" IsFilter="true">
        <EditForm Model="attendancesummary" OnValidSubmit="HandleValidSubmit" Enhance>
            <DataAnnotationsValidator />
            <div class="card-body px-3 py-1 border-y">
                <div class="row">
                    <div class="col-md-3 col-sm-12">
                        <div class="mb-2">
                            <label class="form-label">Month & Year</label>
                            <InputSelect @bind-Value="SelectedMonthYear" class="form-select">
                                <option value="">Select</option>
                                @foreach (var monthYear in AvailableMonthYear)
                                {
                                    <option value="@monthYear.MonthYearDateTime">
                                        @monthYear.MonthYear
                                    </option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Form Buttons -->
            <div class="card-footer m-0 px-2 py-1 border-0">
                <div class="d-flex justify-content-end">
                    <!-- Reset Button -->
                    <button class="btn btn-light border me-1 py-1" type="reset" @onclick="ResetFilters">Reset</button>
                    <button class="btn btn-primary py-1" type="submit">Filter</button>
                </div>
            </div>
        </EditForm>
    </FilterCard>
</div>

<div class="col-12">
    <CTable Items="attendancesummary" TotalCountFromServer="attendanceMonthSummaryCount"
            ActionRequired="false" BackendPagination="true" BackendSorting="true"
            OnPaginationChanged="HandlePaginationChanged" InitialPageNumber="CurrentPage" InitialPageSize="CurrentPageSize" CustomRenderFragments="customRenderFragments" />
</div>

@* <AttendenceDailySummary @ref="attendenceDailySummary"  /> *@

@code {
    private List<GetMonthYear> AvailableMonthYear { get; set; } = new();

    private DateTime? SelectedMonthYear { get; set; }

    private List<Models.Attendances.AttendenceMonthlySummary>? attendancesummary = new();
    private int attendanceMonthSummaryCount = 0;

    private int CurrentPage { get; set; } = 1;
    private int CurrentPageSize { get; set; } = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadMonthYearFilter();

        SelectedMonthYear = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

        await GetAttendanceSummary();
    }


    private async Task GetAttendanceSummary()
    {
        try
        {
            LoadingService.Show();

            SelectedMonthYear ??= DateTime.Now;

            var response = await AttendenceService.GetAttendanceSummary(SelectedMonthYear);

            if (response != null && response.IsSuccess)
            {
                attendancesummary = response.Data;
                if (response.Pagination != null)
                {
                    attendanceMonthSummaryCount = response.Pagination.TotalCount;
                }

                SetCustomFragments();
            }
        }
        catch (Exception ex)
        {
            AlertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    public async Task HandleValidSubmit()
    {
        await GetAttendanceSummary();
    }

    private async Task ResetFilters()
    {
        SelectedMonthYear = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        await GetAttendanceSummary();
    }

    private async Task LoadMonthYearFilter()
    {
        var response = await AttendenceService.GetMonthYearForMonthlyAttendanceFilter();

        if (response?.Data != null)
        {
            AvailableMonthYear = response.Data;
        }
    }

    // Handle pagination changes
    private async Task HandlePaginationChanged((int PageNumber, int PageSize, string? OrderBy, bool Ascending) paginationParams)
    {
        CurrentPage = paginationParams.PageNumber;
        CurrentPageSize = paginationParams.PageSize;
        await GetAttendanceSummary();
    }

    // Render custom fragments for Name column
    private Dictionary<string, RenderFragment<Models.Attendances.AttendenceMonthlySummary>>? customRenderFragments { get; set; }
    private void SetCustomFragments()
    {
        customRenderFragments = new Dictionary<string, RenderFragment<Models.Attendances.AttendenceMonthlySummary>>
        {
            ["Name"] = item => new RenderFragment(builder =>
            {
                builder.AddContent(0, @<NavLink class="link-opacity-100" href=@($"/employee-monthly-summary/{item.EmployeeId}")>
                    <span class="link-primary text-blue">@item.FirstName @item.LastName</span>
                </NavLink>);
            }),
        };
    }
}