@page "/change-password"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using IApply.Frontend.Common.Constants
@using IApply.Frontend.Common.Utilities
@using IApply.Frontend.Components.CustomModal
@using IApply.Frontend.Models.Auth
@using IApply.Frontend.Models.Auth.Login
@using IApply.Frontend.Services
@using IApply.Frontend.Services.ApiService.Auth

@inject NavigationManager _navigationManager
@inject LoadingService LoadingService
@inject IJSRuntime js
@inject IAuthService accountService
@inject AlertService alertService

<PageTitle>Change Password</PageTitle>

<div class="card card-borderless">
    <div class="card-body">
        <EditForm method="post" Model="changePasswordModel" OnValidSubmit="HandleChangePassword"
                  FormName="changePasswordForm" Enhance>
            <DataAnnotationsValidator />
            <div class="row">
                <div class="mb-1 col-sm-6">
                    <div>
                        <label for="currentPassword" class="form-label text-muted">Current Password</label>

                        <div class="input-group">
                            <InputText id="currentPassword" name="currentPassword" autocomplete="off"
                                       type="@(ShowCurrentPassword ? "text" : "password")" placeholder="Enter your current password"
                                       @bind-Value="changePasswordModel.OldPassword" class="form-control" />
                            <span class="input-group-text pe-2" @onclick="()=> ShowCurrentPassword = !ShowCurrentPassword">
                                <!-- Updated to use iconify-icon with dynamic icon binding -->
                                <iconify-icon icon="@(ShowCurrentPassword ? "mdi:eye-off" : "mdi:eye")" class="fs-2"></iconify-icon>
                            </span>
                        </div>
                        <ValidationMessage For="()=> changePasswordModel.OldPassword" class="text-danger" />
                    </div>
                </div>

                <div class="mb-1 col-sm-6">
                    <div>
                        <label for="newPassword" class="form-label text-muted">New Password</label>

                        <div class="input-group">
                            <InputText id="newPassword" name="newPassword" autocomplete="off"
                                       type="@(ShowPassword ? "text" : "password")" placeholder="Enter your new password"
                                       @bind-Value="changePasswordModel.NewPassword" class="form-control" />
                            <span class="input-group-text pe-2" @onclick="()=> ShowPassword = !ShowPassword">
                                <!-- Updated to use iconify-icon with dynamic icon binding -->
                                <iconify-icon icon="@(ShowPassword ? "mdi:eye-off" : "mdi:eye")" class="fs-2"></iconify-icon>
                            </span>
                        </div>
                        <ValidationMessage For="()=> changePasswordModel.NewPassword" class="text-danger" />
                    </div>
                </div>

                <div class="col-sm-12 mt-3 text-end">
                    <button type="submit" class="btn custom-btn">Change Password</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CustomModal? customModal { get; set; }
    private bool ShowPassword { get; set; } = false;
    private bool ShowCurrentPassword { get; set; } = false;
    [SupplyParameterFromForm(FormName = "changePasswordForm")]
    public ChangePasswordRequest changePasswordModel { get; set; } = new();

    private async Task HandleChangePassword()
    {
        try
        {
            LoadingService.Show();
            // var response = await accountService.ChangePassword(changePasswordModel);
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }
}
