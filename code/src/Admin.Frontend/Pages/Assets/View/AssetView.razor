@page "/assets/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using IApply.Frontend.Common.Enums
@using IApply.Frontend.Models.Assets
@using IApply.Frontend.Services
@using IApply.Frontend.Services.ApiService.Asset
@using IApply.Frontend.Services.ApiService.System
@using IApply.Frontend.Common.Utilities;
@using IApply.Frontend.Components.Badge
@using IApply.Frontend.Pages.Assets.Components
@inject LoadingService LoadingService
@inject ISystemService SystemService
@inject IAssetService AssetService
@inject AlertService alertService
@attribute [Authorize]
<PageTitle>Asset Information</PageTitle>


<div class="col-12">
    <div class="card">
        <div class="card-body p-0 mb-2">
            <div class="d-flex align-items-center">
                <!-- Link -->
                <div class="bd-highlight mb-0">
                    <a href="/asset-detail" class="btn btn-link text-decoration-none mb-0 pb-0 pe-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 56 56">
                            <path fill="currentColor" d="M28 51.906c13.055 0 23.906-10.828 23.906-23.906c0-13.055-10.875-23.906-23.93-23.906C14.899 4.094 4.095 14.945 4.095 28c0 13.078 10.828 23.906 23.906 23.906m6.351-13.828c-.445 0-.82-.094-1.171-.305l-14.672-7.617c-1.031-.515-1.43-1.148-1.43-2.156c0-.914.469-1.617 1.43-2.156l14.672-7.922a2.6 2.6 0 0 1 1.242-.281c1.148 0 1.969.867 1.969 1.945c0 .89-.422 1.477-1.407 1.992l-12.47 6.282V28l12.47 6.14c1.03.47 1.406 1.055 1.406 1.97c0 1.1-.844 1.968-2.04 1.968" />
                        </svg>
                    </a>
                </div>

                <!-- Heading -->
                <div class="bd-highlight ms-1 mb-0 mt-2">
                    <h3 class="mb-0 pb-0">@assets.Name</h3>
                </div>

                <!-- Button -->
                <div class="ms-auto bd-highlight">
                    <button class="btn p-0 border btn-light rounded-3 ms-1 mt-2 me-2" @onclick="ToggleCreateAssetsOffCanvas">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                <path d="M7 7H6a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2-2v-1" />
                                <path d="M20.385 6.585a2.1 2.1 0 0 0-2.97-2.97L9 12v3h3zM16 5l3 3" />
                            </g>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-12 mt-2">
    <div class="card">
        <div class="card-body py-2">

            <div class="datagrid">
                <div class="datagrid-item">
                    <div class="datagrid-title">Name</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.Name) ? assets.Name : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Purchase Date</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.PurchaseDate?.ToString()) ? assets.PurchaseDate?.ToString("dd/MM/yyyy") : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Purchase Price</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.PurchasePrice?.ToString()) ? assets.PurchasePrice : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Category</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(Utils.GetDescription((AssetCategory)assets.CategoryId)) ? Utils.GetDescription((AssetCategory)assets.CategoryId) : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Sub-Category</div>
                    <div class="datagrid-content">
                        @(!assets.SubCategoryId.HasValue || assets.SubCategoryId.Value == 0
                            ? "___"
                            : Utils.GetDescription((AssetSubCategory)assets.SubCategoryId.Value))
                    </div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Status</div>
                    <div class="datagrid-content">
                        @if (!string.IsNullOrEmpty(Utils.GetDescription((AssetStatus)assets.StatusId)))
                        {
                            <Badge Text="@Utils.GetDescription((AssetStatus)assets.StatusId)"
                                   BackgroundColor="@GetStatusColor(((AssetStatus)assets.StatusId).ToString())" />
                        }
                        else
                        {
                            <span>___</span>
                        }
                    </div>
                </div>


               @*  <div class="datagrid-item">
                    <div class="datagrid-title">Status</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(Utils.GetDescription((AssetStatus)assets.StatusId)) ? Utils.GetDescription((AssetStatus)assets.StatusId) : "___")</div>
                </div> *@
                <div class="datagrid-item">
                    <div class="datagrid-title">Asset Number</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.AssetNumber) ? assets.AssetNumber : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Created Date</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.CreatedAt?.ToString()) ? assets.CreatedAt : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Created By</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.CreatedBy) ? assets.CreatedBy : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Updated By</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.UpdatedBy) ? assets.UpdatedBy : "___")</div>
                </div>
                @if (assets.UpdatedDate != null)
                {
                    <div class="datagrid-item">
                        <div class="datagrid-title">Updated Date</div>
                        <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.UpdatedDate?.ToString()) ? assets.UpdatedDate : "___")</div>
                    </div>
                }
                <div class="datagrid-item">
                    <div class="datagrid-title">Comment</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(assets.Comment) ? assets.Comment : "___")</div>
                </div>
@*                 @if (assets.FileUrl != "No Image Found.")
                {
                    <div class="datagrid-item">
                        <div class="datagrid-title">Asset File</div>
                        <div class="datagrid-content">
                            <a href="@assets.FileUrl" target="_blank" class="btn btn-primary ms-auto" title="View File">View</a>
                        </div>
                    </div>
                } *@
            </div>
        </div>
    </div>
</div>


<CreateAssetsOffCanvas @ref="createAssetsOffCanvas" GetAssets="GetAssets" EditAsset="assets" IsEditMode="true"/>

<!-- Asset File Upload Section -->
<div class="col-12 mt-2">
    <div class="card">
        <div class="card-body">

            <h3>Asset Files (optional)</h3>

            <!-- SSC/O-Level Upload -->
            <div class="mb-3">
                <div class="d-flex align-items-center justify-content-between mb-1">
                    <div class="d-flex align-items-center">
                        <!-- Title & View Icon -->
                        <label class="form-label me-2 mb-0"><strong>Asset Image</strong></label>
                        @if (AssetImage != null)
                        {
                            <button @onclick="() => OpenFileInModal(AssetImage)" class="btn btn-sm btn-primary rounded-circle d-flex align-items-center justify-content-center p-0 ms-1" title="View File" style="width: 28px; height: 28px;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
                                    <g fill="none" stroke="currentColor" stroke-width="1.5">
                                        <path stroke-linecap="round" d="M9 4.46A9.8 9.8 0 0 1 12 4c4.182 0 7.028 2.5 8.725 4.704C21.575 9.81 22 10.361 22 12c0 1.64-.425 2.191-1.275 3.296C19.028 17.5 16.182 20 12 20s-7.028-2.5-8.725-4.704C2.425 14.192 2 13.639 2 12c0-1.64.425-2.191 1.275-3.296A14.5 14.5 0 0 1 5 6.821" />
                                        <path d="M15 12a3 3 0 1 1-6 0a3 3 0 0 1 6 0Z" />
                                    </g>
                                </svg>
                            </button>
                        }
                    </div>
                </div>
                @if (AssetImage != null)
                {
                    <!-- File exists - Show details in one line -->
                    <div class="p-2 bg-light rounded">
                        <small>
                            <strong>Name:</strong> @AssetImage.FileName &nbsp;|&nbsp;
                            <strong>Type:</strong> @AssetImage.FileType &nbsp;|&nbsp;
                            <strong>Size:</strong> @(AssetImage.FileSize / 1024) KB &nbsp;|&nbsp;
                            <strong>Uploaded By:</strong> @AssetImage.UploadedBy &nbsp;|&nbsp;
                            <strong>Uploaded Date:</strong> @AssetImage.UploadedDate
                        </small>
                    </div>
                }
                else
                {
                    <div class="custom-file">
                        <InputFile class="d-none" id="assetImage" OnChange="@(e => OnFileSelected(e, AssetFilesEnum.AssetImage))" multiple />
                        <label class="btn btn-primary" for="assetImage">Upload</label>
                        <span class="ms-2">
                            @(selectedFileNames.TryGetValue(AssetFilesEnum.AssetImage, out var assetImage) ? assetImage : "No file chosen")
                        </span>
                    </div>
                }
            </div>
            <hr>

            <!-- HSSC/A-Level Upload -->
            <div class="mb-3">
                <div class="d-flex align-items-center justify-content-between mb-1">
                    <div class="d-flex align-items-center">
                        <!-- Title & View Icon -->
                        <label class="form-label me-2 mb-0"><strong>Purchase Receipt</strong></label>
                        @if (PurchaseReceipt != null)
                        {
                            <button @onclick="() => OpenFileInModal(PurchaseReceipt)" class="btn btn-sm btn-primary rounded-circle d-flex align-items-center justify-content-center p-0 ms-1" title="View File" style="width: 28px; height: 28px;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
                                    <g fill="none" stroke="currentColor" stroke-width="1.5">
                                        <path stroke-linecap="round" d="M9 4.46A9.8 9.8 0 0 1 12 4c4.182 0 7.028 2.5 8.725 4.704C21.575 9.81 22 10.361 22 12c0 1.64-.425 2.191-1.275 3.296C19.028 17.5 16.182 20 12 20s-7.028-2.5-8.725-4.704C2.425 14.192 2 13.639 2 12c0-1.64.425-2.191 1.275-3.296A14.5 14.5 0 0 1 5 6.821" />
                                        <path d="M15 12a3 3 0 1 1-6 0a3 3 0 0 1 6 0Z" />
                                    </g>
                                </svg>
                            </button>
                        }
                    </div>
                </div>
                @if (PurchaseReceipt != null)
                {
                    <!-- File exists - Show details in one line -->
                    <div class="p-2 bg-light rounded">
                        <small>
                            <strong>Name:</strong> @PurchaseReceipt.FileName &nbsp;|&nbsp;
                            <strong>Type:</strong> @PurchaseReceipt.FileType &nbsp;|&nbsp;
                            <strong>Size:</strong> @(PurchaseReceipt.FileSize / 1024) KB &nbsp;|&nbsp;
                            <strong>Uploaded By:</strong> @PurchaseReceipt.UploadedBy &nbsp;|&nbsp;
                            <strong>Uploaded Date:</strong> @PurchaseReceipt.UploadedDate
                        </small>
                    </div>
                }
                else
                {
                    <div class="custom-file">
                        <InputFile class="d-none" id="purchaseReceipt" OnChange="@(e => OnFileSelected(e, AssetFilesEnum.PurchaseReceipt))" multiple />
                        <label class="btn btn-primary" for="purchaseReceipt">Upload</label>
                        <span class="ms-2">
                            @(selectedFileNames.TryGetValue(AssetFilesEnum.PurchaseReceipt, out var purchaseReceipt) ? purchaseReceipt : "No file chosen")
                        </span>
                    </div>
                }
            </div>
            <hr>

        </div>
    </div>
</div>

<!-- Modal for file preview -->
@if (isModalVisible)
{
    <div class="modal fade show" tabindex="-1" role="dialog" aria-labelledby="modalLabel" style="display: block;" aria-modal="true">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content border">
                <div class="modal-header border-bottom">
                    <h5 class="modal-title" id="modalLabel">Preview</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (fileType.Contains("image"))
                    {
                        <img src="@fileUrl" class="img-fluid" alt="Image Preview" />
                    }
                    else if (fileType.Contains("pdf"))
                    {
                        <embed src="@fileUrl" type="application/pdf" class="w-100" style="height: 600px;" />
                    }
                    else if (fileType.Contains("text") || fileType.Contains("plain"))
                    {
                        <iframe src="@fileUrl" class="w-100" style="height: 400px;" title="Text Preview"></iframe>
                    }
                    else if (fileType.Contains("word") || fileType.Contains("excel") || fileType.Contains("officedocument"))
                    {
                        <div class="text-center">
                            <p class="mb-2">This file type is not supported for preview in browser.</p>
                            <a href="@fileUrl" download class="btn btn-outline-primary">
                                Download File
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <p class="mb-2">Unsupported file type.</p>
                            <a href="@fileUrl" download class="btn btn-outline-secondary">
                                Download File
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    public CreateAssetsOffCanvas? createAssetsOffCanvas { get; set; }
    private Assets? assets = new();
    private CreateAssetRequest? assetsRequest = new();


    protected override async Task OnParametersSetAsync()
    {
        await GetAssets();
    }

    private void ToggleCreateAssetsOffCanvas()
    {
        createAssetsOffCanvas?.ToggleOffCanvas();
    }

    public AssetFileGet? AssetImage { get; set; }
    public AssetFileGet? PurchaseReceipt { get; set; }

    private async Task GetAssets()
    {
        try
        {
            LoadingService.Show();

            if (!int.TryParse(Id, out int assetId))
            {
                alertService.ShowError("Invalid Asset");
                return;
            }

            var request = new AssetsRequest
            {
                AssetId = assetId
            };

            var response = await AssetService.GetAssets(request);
            if (response != null && response.IsSuccess && response.Data?.Count > 0)
            {
                assets = new Assets
                {
                    AssetId = response.Data[0].AssetId,
                    Name = response.Data[0].Name,
                    CreatedAt = response.Data[0].CreatedAt,
                    PurchaseDate = response.Data[0].PurchaseDate,
                    PurchasePrice = (int)response.Data[0].PurchasePrice,
                    CategoryId = response.Data[0].CategoryId, 
                    SubCategoryId = response.Data[0].SubCategoryId ?? 0,
                    StatusId = response.Data[0].StatusId,
                    Category = response.Data[0].Category ?? string.Empty,
                    SubCategory = response.Data[0].SubCategory ?? string.Empty,
                    Status = response.Data[0].Status ?? string.Empty,
                    AssetNumber = response.Data[0].AssetNumber ?? string.Empty,
                    Comment = response.Data[0].Comment ?? string.Empty,
                    CreatedBy = response.Data[0].CreatedBy ?? string.Empty,
                    UpdatedBy = response.Data[0].UpdatedBy ?? string.Empty,
                    UpdatedDate = response.Data[0].UpdatedDate,
                    // FileUrl = response.Data[0].FileUrl
                    Files = response.Data[0].Files ?? new List<AssetFileGet>()
                };

                AssetImage = response.Data[0].Files.FirstOrDefault(f => f.CategoryId == (int)AssetFilesEnum.AssetImage);
                PurchaseReceipt = response.Data[0].Files.FirstOrDefault(f => f.CategoryId == (int)AssetFilesEnum.PurchaseReceipt);

            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task AddAsset(CreateAssetRequest asset)
    {
        try
        {
            LoadingService.Show();
            var response = new BaseResponse();

            if (asset.AssetId > 0)
            {
                response = await AssetService.UpdateAsset(asset);
            }

            if (response != null && response.IsSuccess)
            {
                alertService.Show("Asset Updated Successfully");
            }
            else if (response != null)
            {
                string errorMessage = response?.ErrorCode != null ? ErrorService.GetErrorMessage(response.ErrorCode) : "An unknown error occurred.";
                alertService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    // File Upload Implementations

    // Used to change the label and view for the upload button
    private string fileName = "No file chosen";

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        fileName = file != null ? file.Name : "No file chosen";
    }

    [Parameter] public int? SubCategoryId { get; set; }  // Employee ID as a parameter

    // Dictionary to store selected file names dynamically
    private Dictionary<AssetFilesEnum, string> selectedFileNames = new();
    private Dictionary<AssetFilesEnum, List<IBrowserFile>> uploadedFiles = new();

    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB file size limit

    private async Task OnFileSelected(InputFileChangeEventArgs e, AssetFilesEnum categoryId, int? subCategoryId = null)
    {
        var files = e.GetMultipleFiles().ToList();
        var oversizedFiles = files.Where(f => f.Size > MaxFileSize).ToList();

        if (oversizedFiles.Any())
        {
            alertService.ShowError($"The following files exceed 5MB: {string.Join(", ", oversizedFiles.Select(f => f.Name))}");
            files.RemoveAll(f => f.Size > MaxFileSize);
        }

        if (files.Count == 0)
        {
            selectedFileNames[categoryId] = "No file chosen";
            uploadedFiles.Remove(categoryId);
        }
        else
        {
            selectedFileNames[categoryId] = string.Join(", ", files.Select(f => f.Name));
            uploadedFiles[categoryId] = files;

            await UploadAssetFiles();
        }
    }

    // Upload function
    private async Task UploadAssetFiles()
    {
        try
        {
            LoadingService.Show();

            if (!int.TryParse(Id, out int employeeId))
            {
                alertService.ShowError("Invalid Employee ID.");
                return;
            }

            var fileUploadRequest = new AssetFileUploadRequest
            {
                AssetId = employeeId, // Using the passed EmployeeId
                AssetFile = uploadedFiles.Select(kv => new AssetFileModel
                {
                    CategoryId = (int)kv.Key,
                    SubCategoryId = SubCategoryId ?? null, // Modify as needed
                    Files = kv.Value.FirstOrDefault()
                }).ToList()
            };

            var response = await AssetService.AssetFileUpload(fileUploadRequest);
            if (response != null && response.IsSuccess)
            {
                alertService.Show("File Uploaded Successfully.");
                ResetFileInputs(); // **Call Reset Method Here**
                await GetAssets();
            }
            else
            {
                alertService.ShowError("File Failed to Upload.");
            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private void ResetFileInputs()
    {
        uploadedFiles.Clear();
        selectedFileNames = selectedFileNames.ToDictionary(k => k.Key, v => "No file chosen");
        StateHasChanged(); // Refresh UI
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Operational" => "bg-success",
            "Maintenance" => "bg-warning",
            "Retired" => "bg-secondary",
            _ => "bg-light"
        };
    }

    private bool isModalVisible = false;
    private string fileUrl;
    private string fileType;

    private void OpenFileInModal(AssetFileGet file)
    {
        fileUrl = file.FileUrl;
        fileType = file.FileType;

        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}


@* <!-- Asset File Upload Section -->
<div class="col-12 mt-2">
    <div class="card">
        <div class="card-body">

            <h3>Asset Files (optional)</h3>

            <!-- Image Upload -->
            <div class="mb-3">
                <label class="form-label me-2"><strong>Asset Image:</strong></label>
                <div class="custom-file d-flex align-items-center">
                    <label class="btn btn-primary me-2" for="assetImage">Browse</label>
                    <span class="me-2">@(selectedFileNames.TryGetValue(AssetFilesEnum.AssetImage, out var assetImage) ? assetImage : "No file chosen")</span>
                    @if (!string.IsNullOrWhiteSpace(assets.FileUrl) && assets.FileUrl != "No Image Found")
                    {
                        <a href="@assets.FileUrl" target="_blank" class="btn btn-primary ms-auto" title="View File">View</a>
                    }
                </div>
            </div>
            <hr>

            <button type="button" class="btn btn-success" @onclick="UploadAssetFiles">Upload Files</button>

        </div>
    </div>
</div> *@
    
