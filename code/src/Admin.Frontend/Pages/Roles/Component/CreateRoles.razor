@using IApply.Frontend.Common.Utilities
@using IApply.Frontend.Models.Roles
@using IApply.Frontend.Services
@using IApply.Frontend.Services.ApiService
@using IApply.Frontend.Services.ApiService.Role
@using IApply.Frontend.Common.Constants
@using IApply.Frontend.Models.Roles.GetRoles


@inject ApiService ApiService
@inject LoadingService LoadingService
@inject IJSRuntime js
@inject IRoleService RoleService
@inject AlertService alertService

<EditForm EditContext="@editContext" method="post" OnValidSubmit="HandleValidSubmit" FormName="CreateRoleForm" Enhance>

    <DataAnnotationsValidator />
    <div class="row">

        <div class="mb-2 col">
            <div class="form-floating">

                <InputText id="name" name="name" type="text" placeholder="Enter Role Name"
                           @bind-Value="CreateRolesRequest.Name" class="form-control" disabled="@(!CanEdit)" />
                <ValidationMessage For="@(() => CreateRolesRequest.Name)" class="text-danger" />
                <label for="Name" class="form-label text-muted">
                    @(Utils.GetDisplayName<RoleRequest>(nameof(RoleRequest.Name)))
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mb-3 col">
            <div class="form-floating">

                <InputText id="description" name="description" type="text" placeholder="Enter Description"
                           @bind-Value="CreateRolesRequest.Description" class="form-control" disabled="@(!CanEdit)" />
                <ValidationMessage For="@(() => CreateRolesRequest.Description)" class="text-danger" />
                <label for="Description" class="form-label text-muted">
                    @(Utils.GetDisplayName<RoleRequest>(nameof(RoleRequest.Description)))
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="mb-2 col">
            <label class="form-check form-switch">
                <span class="form-check-label">Active
                    <input class="form-check-input" type="checkbox" @bind="CreateRolesRequest.IsActive" disabled="@(!CanEdit)">
                </span>
            </label>
        </div>
    </div>

    @if (CanEdit)
    {
        <button type="submit" style="display: none"></button>
    }

</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "CreateRoleForm")]
    public RoleRequest CreateRolesRequest { get; set; } = new();
    [Parameter]
    public EventCallback<RoleRequest> AddRole { get; set; }
    [Parameter]
    public EventCallback<RoleRequest> UpdateRole { get; set; }
    [Parameter]
    public Guid? RoleId { get; set; }
    [Parameter]
    public bool CanEdit { get; set; } = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        SetEditContext();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (RoleId != null && RoleId != CreateRolesRequest.RecordId)
        {
            await GetRoleById();
        }
    }

    private async Task GetRoleById()
    {
        try
        {
            LoadingService.Show();
            var response = await RoleService.GetRoleById((Guid)RoleId);

            if (response != null && response.IsSuccess)
            {
                if (response.Roles != null && response.Roles.Count > 0)
                {
                    CreateRolesRequest = response.Roles.Select(r => new RoleRequest
                    {
                        RecordId = r.Id,
                        Name = r.Name,
                        Description = r.Description,
                        IsActive = r.IsActive
                    }).FirstOrDefault();

                    SetEditContext();
                }
            }
            else if (response != null)
            {
                string errorMessage = response?.ErrorCode != null ? ErrorService.GetErrorMessage(response.ErrorCode) : "An unknown error occurred.";
                alertService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (editContext.Validate())
        {
            if (RoleId != null)
            {
                await UpdateRole.InvokeAsync(CreateRolesRequest);
            }
            else
            {
                await AddRole.InvokeAsync(CreateRolesRequest);
            }
        }
    }

    private void SetEditContext()
    {
        editContext = new EditContext(CreateRolesRequest);
    }

    public void ResetForm()
    {
        CreateRolesRequest = new();
        RoleId = null;
        SetEditContext();
    }
}
