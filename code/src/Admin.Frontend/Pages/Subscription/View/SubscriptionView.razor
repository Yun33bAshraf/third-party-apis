@page "/subscription/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using IApply.Frontend.Common.Enums
@using IApply.Frontend.Common.Utilities;
@using IApply.Frontend.Components.Badge
@using IApply.Frontend.Models.Business
@using IApply.Frontend.Models.Subscription
@using IApply.Frontend.Pages.Subscription.Components
@using IApply.Frontend.Services
@using IApply.Frontend.Services.ApiService.Subscription

@inject LoadingService LoadingService
@inject ISubscriptionService SubscriptionService
@inject AlertService alertService
@attribute [Authorize]
<PageTitle>Asset Information</PageTitle>


<div class="col-12">
    <div class="card">
        <div class="card-body p-0 mb-2">
            <div class="d-flex align-items-center">
                <!-- Link -->
                <div class="bd-highlight mb-0">
                    <a href="/subscription-listing" class="btn btn-link text-decoration-none mb-0 pb-0 pe-0">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 56 56">
                            <path fill="currentColor" d="M28 51.906c13.055 0 23.906-10.828 23.906-23.906c0-13.055-10.875-23.906-23.93-23.906C14.899 4.094 4.095 14.945 4.095 28c0 13.078 10.828 23.906 23.906 23.906m6.351-13.828c-.445 0-.82-.094-1.171-.305l-14.672-7.617c-1.031-.515-1.43-1.148-1.43-2.156c0-.914.469-1.617 1.43-2.156l14.672-7.922a2.6 2.6 0 0 1 1.242-.281c1.148 0 1.969.867 1.969 1.945c0 .89-.422 1.477-1.407 1.992l-12.47 6.282V28l12.47 6.14c1.03.47 1.406 1.055 1.406 1.97c0 1.1-.844 1.968-2.04 1.968" />
                        </svg>
                    </a>
                </div>

                <!-- Heading -->
                <div class="bd-highlight ms-1 mb-0 mt-2">
                    <h3 class="mb-0 pb-0">@subscriptions.Name</h3>
                </div>

                <!-- Button -->
                <div class="ms-auto bd-highlight">
                    <button class="btn p-0 border btn-light rounded-3 ms-1 mt-2 me-2" @onclick="ToggleCreateAssetsOffCanvas">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                <path d="M7 7H6a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2-2v-1" />
                                <path d="M20.385 6.585a2.1 2.1 0 0 0-2.97-2.97L9 12v3h3zM16 5l3 3" />
                            </g>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="col-12 mt-2">
    <div class="card">
        <div class="card-body py-2">

            <div class="datagrid">
                <div class="datagrid-item">
                    <div class="datagrid-title">Name</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(subscriptions.Name) ? subscriptions.Name : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Description</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(subscriptions.Description?.ToString()) ? subscriptions.Description : "___")</div>
                </div>
                <div class="datagrid-item">
                    <div class="datagrid-title">Price</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(subscriptions.Price.ToString()) ? Math.Round(subscriptions.Price, 2) : "___")</div>
                </div>                
                <div class="datagrid-item">
                    <div class="datagrid-title">Duration In Days</div>
                    <div class="datagrid-content">@(!string.IsNullOrEmpty(subscriptions.DurationInDays.ToString()) ? subscriptions.DurationInDays : "___")</div>
                </div>               
                <div class="datagrid-item">
                    <div class="datagrid-title">Status</div>
                    <div class="datagrid-content">
                        <Badge Text="@(subscriptions.Status.ToString())" BackgroundColor="@GetBackgroundColor(subscriptions.Status.ToString())" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<CreateSubscriptionsOffCanvas @ref="createSubscriptionsOffCanvas" GetSubscriptions="GetSubscriptions" EditSubscription="subscriptions" IsEditMode="true" />


@code {
    [Parameter]
    public string Id { get; set; }

    public CreateSubscriptionsOffCanvas? createSubscriptionsOffCanvas { get; set; }
    private SubscriptionListing? subscriptions = new();
    private CreateSubscriptionRequest? subscriptionsRequest = new();


    protected override async Task OnParametersSetAsync()
    {
        await GetSubscriptions();
    }

    private void ToggleCreateAssetsOffCanvas()
    {
        createSubscriptionsOffCanvas?.ToggleOffCanvas();
    }


    private async Task GetSubscriptions()
    {
        try
        {
            LoadingService.Show();

            if (!int.TryParse(Id, out int subscriptionId))
            {
                alertService.ShowError("Invalid Asset");
                return;
            }

            var request = new GetSubscriptionListingRequest
            {
                SubscriptionId = subscriptionId,
                PageNo = 0,
                    PageSize = 0,
            };

            var response = await SubscriptionService.GetSubscriptionListing(request);
            if (response != null && response.Status && response.Data?.Count > 0)
            {
                subscriptions = new SubscriptionListing
                {
                    Id = response.Data[0].Id,
                    Name = response.Data[0].Name,
                    Description = response.Data[0].Description,
                        Price = response.Data[0].Price,
                        DurationInDays = response.Data[0].DurationInDays,
                    Status = response.Data[0].Status, 
                };
            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private async Task AddAsset(CreateSubscriptionRequest subscription)
    {
        try
        {
            LoadingService.Show();
            var response = new BaseResponse<CreateSubscriptionResponse>();

            if (subscription.Id > 0)
            {
                response = await SubscriptionService.CreateUpdateSubscription(subscription);
            }

            if (response != null && response.Status)
            {
                alertService.Show("Subscription Updated Successfully");
            }
            else if (response != null)
            {
                string errorMessage = response?.Error != null ? response.Error : "An unknown error occurred.";
                alertService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            alertService.ShowError(ex.Message);
        }
        finally
        {
            LoadingService.Hide();
        }
    }

    private string GetBackgroundColor(string status)
    {
        return status switch
        {
            "True" => "bg-success",
            "False" => "bg-warning",
            _ => "bg-light"
        };
    }
}